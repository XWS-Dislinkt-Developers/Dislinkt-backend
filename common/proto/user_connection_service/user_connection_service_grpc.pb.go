// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: user_connection_service/user_connection_service.proto

package user_connection_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserConnectionServiceClient is the client API for UserConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserConnectionServiceClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
}

type userConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserConnectionServiceClient(cc grpc.ClientConnInterface) UserConnectionServiceClient {
	return &userConnectionServiceClient{cc}
}

func (c *userConnectionServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/user_connection_service.UserConnectionService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userConnectionServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, "/user_connection_service.UserConnectionService/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserConnectionServiceServer is the server API for UserConnectionService service.
// All implementations must embed UnimplementedUserConnectionServiceServer
// for forward compatibility
type UserConnectionServiceServer interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	mustEmbedUnimplementedUserConnectionServiceServer()
}

// UnimplementedUserConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserConnectionServiceServer struct {
}

func (UnimplementedUserConnectionServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserConnectionServiceServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedUserConnectionServiceServer) mustEmbedUnimplementedUserConnectionServiceServer() {}

// UnsafeUserConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserConnectionServiceServer will
// result in compilation errors.
type UnsafeUserConnectionServiceServer interface {
	mustEmbedUnimplementedUserConnectionServiceServer()
}

func RegisterUserConnectionServiceServer(s grpc.ServiceRegistrar, srv UserConnectionServiceServer) {
	s.RegisterService(&UserConnectionService_ServiceDesc, srv)
}

func _UserConnectionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserConnectionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_connection_service.UserConnectionService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserConnectionServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserConnectionService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserConnectionServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_connection_service.UserConnectionService/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserConnectionServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserConnectionService_ServiceDesc is the grpc.ServiceDesc for UserConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_connection_service.UserConnectionService",
	HandlerType: (*UserConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _UserConnectionService_GetAll_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _UserConnectionService_Follow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_connection_service/user_connection_service.proto",
}
