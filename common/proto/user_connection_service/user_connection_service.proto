syntax = "proto3";

option go_package = "github.com/XWS-Dislinkt-Developers/Dislinkt-backend/common/user_connection_service";

package user_connection_service;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service UserConnectionService {
  rpc GetAll(GetAllRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/userConnections"
    };
  };
  rpc RegisterUserConnection(RegisterRequest) returns (RegisterResponse){
    option (google.api.http) = {
      put: "/register/{idUser}"
    };
  };
  rpc GetById(UserIdRequest) returns (UserConnection){
    option (google.api.http) = {
      get: "/getConnectionForUser/{idUser}"
    };
  }
  rpc Follow(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/follow/{idUser}"
    };
  };
  rpc Unfollow(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/unfollow/{idUser}"
    };
  };
  rpc AcceptConnectionRequest(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/accept/{idUser}"
    };
  };
  rpc DeclineConnectionRequest(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/decline/{idUser}"
    };
  };
  rpc CancelConnectionRequest(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/cancel/{idUser}"
    };
  };
  rpc GetConnectionsByUser(UserIdRequest) returns (Connections){
    option (google.api.http) = {
      get: "/connections/{idUser}"
    };
  }
  rpc BlockUser(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/block/{idUser}"
    };
  }
  rpc UnblockUser(UserIdRequest) returns (ConnectionsResponse){
    option (google.api.http) = {
      put: "/unblock/{idUser}"
    };
  }

}

message GetAllRequest {
}

message GetAllResponse {
  repeated UserConnection userConnections = 1;
}

message UserIdRequest{
  int64 idUser = 1;
}

message RegisterRequest{
  int64 idUser = 1;
  bool isItPrivate = 2;
}

message RegisterResponse {
  int64 status = 1;
  string error = 2;
}

message ConnectionsResponse{
  repeated UserConnection userConnections = 1;
}

message UserConnection {
  int64 userId = 1;
  bool private = 2;
  repeated int64 connections = 3;
  repeated int64 requests = 4;
  repeated int64 waitingResponse = 5;
  repeated int64 blocked = 6;
}

message Connections {
   Connection connections = 1;
}

message Connection {
  repeated int64 connections = 1;
}