// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: user_post_service/user_post_service.proto

package user_post_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPostServiceClient is the client API for UserPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPostServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	CreateUserPost(ctx context.Context, in *CreateUserPostRequest, opts ...grpc.CallOption) (*CreateUserPostResponse, error)
	// TODO: AddReactionToUserPost
	AddReactionToUserPost(ctx context.Context, in *AddReactionRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// TODO: AddCommentToUserPost
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type userPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPostServiceClient(cc grpc.ClientConnInterface) UserPostServiceClient {
	return &userPostServiceClient{cc}
}

func (c *userPostServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/user_post_service.UserPostService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/user_post_service.UserPostService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) CreateUserPost(ctx context.Context, in *CreateUserPostRequest, opts ...grpc.CallOption) (*CreateUserPostResponse, error) {
	out := new(CreateUserPostResponse)
	err := c.cc.Invoke(ctx, "/user_post_service.UserPostService/CreateUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) AddReactionToUserPost(ctx context.Context, in *AddReactionRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/user_post_service.UserPostService/AddReactionToUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/user_post_service.UserPostService/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPostServiceServer is the server API for UserPostService service.
// All implementations must embed UnimplementedUserPostServiceServer
// for forward compatibility
type UserPostServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	CreateUserPost(context.Context, *CreateUserPostRequest) (*CreateUserPostResponse, error)
	// TODO: AddReactionToUserPost
	AddReactionToUserPost(context.Context, *AddReactionRequest) (*GetResponse, error)
	// TODO: AddCommentToUserPost
	AddComment(context.Context, *AddCommentRequest) (*GetResponse, error)
	mustEmbedUnimplementedUserPostServiceServer()
}

// UnimplementedUserPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPostServiceServer struct {
}

func (UnimplementedUserPostServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserPostServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserPostServiceServer) CreateUserPost(context.Context, *CreateUserPostRequest) (*CreateUserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) AddReactionToUserPost(context.Context, *AddReactionRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReactionToUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) AddComment(context.Context, *AddCommentRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedUserPostServiceServer) mustEmbedUnimplementedUserPostServiceServer() {}

// UnsafeUserPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPostServiceServer will
// result in compilation errors.
type UnsafeUserPostServiceServer interface {
	mustEmbedUnimplementedUserPostServiceServer()
}

func RegisterUserPostServiceServer(s grpc.ServiceRegistrar, srv UserPostServiceServer) {
	s.RegisterService(&UserPostService_ServiceDesc, srv)
}

func _UserPostService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_post_service.UserPostService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_post_service.UserPostService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_CreateUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).CreateUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_post_service.UserPostService/CreateUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).CreateUserPost(ctx, req.(*CreateUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_AddReactionToUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).AddReactionToUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_post_service.UserPostService/AddReactionToUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).AddReactionToUserPost(ctx, req.(*AddReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_post_service.UserPostService/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPostService_ServiceDesc is the grpc.ServiceDesc for UserPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_post_service.UserPostService",
	HandlerType: (*UserPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserPostService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserPostService_GetAll_Handler,
		},
		{
			MethodName: "CreateUserPost",
			Handler:    _UserPostService_CreateUserPost_Handler,
		},
		{
			MethodName: "AddReactionToUserPost",
			Handler:    _UserPostService_AddReactionToUserPost_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _UserPostService_AddComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_post_service/user_post_service.proto",
}
