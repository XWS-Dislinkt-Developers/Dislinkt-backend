// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: job_service/job_service.proto

package job_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	GetAllJobOffers(ctx context.Context, in *GetAllJobOffersRequest, opts ...grpc.CallOption) (*GetAllJobOffersResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	PostJob(ctx context.Context, in *PostJobRequest, opts ...grpc.CallOption) (*PostJobResponse, error)
	PostJobCompany(ctx context.Context, in *PostJobCompanyRequest, opts ...grpc.CallOption) (*PostJobCompanyResponse, error)
	GetJobOffers(ctx context.Context, in *GetJobOffersRequest, opts ...grpc.CallOption) (*GetJobOffersResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) GetAllJobOffers(ctx context.Context, in *GetAllJobOffersRequest, opts ...grpc.CallOption) (*GetAllJobOffersResponse, error) {
	out := new(GetAllJobOffersResponse)
	err := c.cc.Invoke(ctx, "/job_service.JobService/GetAllJobOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/job_service.JobService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/job_service.JobService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) PostJob(ctx context.Context, in *PostJobRequest, opts ...grpc.CallOption) (*PostJobResponse, error) {
	out := new(PostJobResponse)
	err := c.cc.Invoke(ctx, "/job_service.JobService/PostJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) PostJobCompany(ctx context.Context, in *PostJobCompanyRequest, opts ...grpc.CallOption) (*PostJobCompanyResponse, error) {
	out := new(PostJobCompanyResponse)
	err := c.cc.Invoke(ctx, "/job_service.JobService/PostJobCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobOffers(ctx context.Context, in *GetJobOffersRequest, opts ...grpc.CallOption) (*GetJobOffersResponse, error) {
	out := new(GetJobOffersResponse)
	err := c.cc.Invoke(ctx, "/job_service.JobService/GetJobOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	GetAllJobOffers(context.Context, *GetAllJobOffersRequest) (*GetAllJobOffersResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	PostJob(context.Context, *PostJobRequest) (*PostJobResponse, error)
	PostJobCompany(context.Context, *PostJobCompanyRequest) (*PostJobCompanyResponse, error)
	GetJobOffers(context.Context, *GetJobOffersRequest) (*GetJobOffersResponse, error)
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) GetAllJobOffers(context.Context, *GetAllJobOffersRequest) (*GetAllJobOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllJobOffers not implemented")
}
func (UnimplementedJobServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedJobServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedJobServiceServer) PostJob(context.Context, *PostJobRequest) (*PostJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJob not implemented")
}
func (UnimplementedJobServiceServer) PostJobCompany(context.Context, *PostJobCompanyRequest) (*PostJobCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJobCompany not implemented")
}
func (UnimplementedJobServiceServer) GetJobOffers(context.Context, *GetJobOffersRequest) (*GetJobOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobOffers not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_GetAllJobOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllJobOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetAllJobOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_service.JobService/GetAllJobOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetAllJobOffers(ctx, req.(*GetAllJobOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_service.JobService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_service.JobService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_PostJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).PostJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_service.JobService/PostJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).PostJob(ctx, req.(*PostJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_PostJobCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).PostJobCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_service.JobService/PostJobCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).PostJobCompany(ctx, req.(*PostJobCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_service.JobService/GetJobOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobOffers(ctx, req.(*GetJobOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_service.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllJobOffers",
			Handler:    _JobService_GetAllJobOffers_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _JobService_GetAll_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _JobService_GetToken_Handler,
		},
		{
			MethodName: "PostJob",
			Handler:    _JobService_PostJob_Handler,
		},
		{
			MethodName: "PostJobCompany",
			Handler:    _JobService_PostJobCompany_Handler,
		},
		{
			MethodName: "GetJobOffers",
			Handler:    _JobService_GetJobOffers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job_service/job_service.proto",
}
